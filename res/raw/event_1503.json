{"description": "\n<p>If you&#8217;re building a web application today, JavaScript is one of the\nmost important foundations on which your application is built. There are\na lot of libraries available to help you rapidly and easily <em>use</em> JavaScript to\ngreat effect. <em>Testing</em> that code, well, that&#8217;s a different matter.</p>\n<p>Java has JUnit. Ruby has Test::Unit and RSpec. Python has unittest and Nose.</p>\n<p>JavaScript has a number of unit test frameworks as well, but they see far\nless use than those seen in other languages. What JavaScript doesn&#8217;t\nhave is an environment that makes it easy for a developer to write and\nrun their tests without breaking their train of thought.</p>\n<p>In Java you run Eclipse or ant. In Ruby you run rake or autotest. In\npython you run python or nose.</p>\n<p>In JavaScript, you write your code, create an <span class=\"caps\">HTML</span> fixture page to\ntest that code, load that page in browser, click a few times, and look\nto see if the result looks right. Then you switch back to your editor,\nmodify your code, bring the browser up again, hit browser refresh, click, look &#8230;</p>\n<p>Or, more likely, you don&#8217;t. At least not very often.</p>\n<p>And if you do run tests, you only run the tests you think you broke,\nrather than the ones you actually did break.</p>\n<p>Much of this is because in JavaScript it has been harder to <em>run</em>\ntests than it has been to <em>write</em> them.</p>\n<p>It&#8217;s now possible to do much better than\nedit/refresh/look/repeat. Borrowing heavily from best practices in\nother languages, it&#8217;s now possible to make JavaScript unit testing as\neasy as in, say, Ruby:</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Without ever leaving your editor/IDE<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Running tests without a browser<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Running all tests in the browser quickly<br/>\n<br/>\n<p>In this talk we&#8217;ll walk through the process of developing/modifying a\nJavaScript browser-based application in a test-first manner, showing\nhow every step can be automated for immediate feedback to the\ndeveloper.</p>\n<p>Highlights:</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Running tests without an <span class=\"caps\">HTML</span> fixture<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Running tests against production <span class=\"caps\">HTML</span> in situ<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Test driven development with qunit<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Behavior-driven development with jasmine<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Using SpiderMonkey and Johnson to run JavaScript out of the browser <em>fast</em><br/>\n&nbsp;&nbsp;&nbsp;&#8226; Using env.js to test within the browser environment without a browser<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Using jazrb to run jasmine and qunit tests from the command line and get RSpec or JUnit output<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Using wake to run all affected tests (and jslint!) on every save<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Testing asynchronous JavaScript<br/>\n<br/>\n", "title": "Test and Behavior Driven Development in JavaScript", "start_time": "2010-07-22T14:30:00-07:00", "track_id": 20, "user_ids": [1527], "room_id": 6, "end_time": "2010-07-22T15:10:00-07:00", "id": 1503}