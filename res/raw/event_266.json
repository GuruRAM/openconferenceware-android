{"description": "\n<p><a href=\"http://incubator.apache.org/projects/trafficserver.html\">Apache Traffic Server</a> is a fast, scalable and feature rich <span class=\"caps\">HTTP</span> proxy and caching server. Traffic Server was originally a commercial product from Inktomi corporation, and has been actively used inside Yahoo! for many years, as well as by many other large web sites. As of 2009, Traffic Server is an OpenSource project under the Apache umbrella, and is rapidly being developed and improved on by an active community.</p>\n<p>This talk will explain the details behind the Traffic Server technology; What makes it fast? Why is it scalable? And how is it different compared to other <span class=\"caps\">HTTP</span> proxy servers? We will discuss several use cases, and show how to configure and operate TS for common tasks. Being an <span class=\"caps\">HTTP</span> proxy server and cache, there are many potential use cases, e.g.</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Forward proxy, e.g. inside a corporate firewall<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Reverse proxy, a.k.a. <span class=\"caps\">HTTP</span> accelerator<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Intelligent traffic and connection management<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Layer 7 (HTTP) routing, e.g. <span class=\"caps\">URL</span> hashing<br/>\n<br/>\n<p>Traffic Server is designed using a hybrid processing model, combining an event driven engine, with a multi-threaded process approach. This allows Traffic Server to scale on modern multi-core systems, taking advantge of available CPUs. Each thread (typically 2-3 per <span class=\"caps\">CPU</span>) runs its own event driven state machine, which implies that each thread handles many client connections, i.e. an m-to-n model. Limiting the number of worker threads avoids the resource problems associated with thousands or tens of thousands of threads.</p>\n<p>After introducing the technical details behind TS, we will discuss the common applications of a proxy and cache, when and why they would be applicable, and how to configure and use Apache Traffic Server effectively. Focusing on how to effectively use TS in a production environment, we&#8217;ll walk the audience through</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Installation process<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Configuration files<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Operations and monitoring<br/>\n<br/>\n<p>The goal is to give a solid foundation of web proxying and caching, and why Apache Traffic Server is a serious contender in this space. We&#8217;ll analyze and understand the problem space, what tools TS provides, and how to use them.</p>\n", "title": "Driving Apache Traffic Server", "start_time": "2010-07-22T16:30:00-07:00", "track_id": 17, "user_ids": [256], "room_id": 9, "end_time": "2010-07-22T17:10:00-07:00", "id": 266}