{"description": "\n<p>A fast-paced session meant for experienced coders, this tutorial focuses mostly on the practical issues of choosing appropriate Design Patterns for the purpose of solving problems in Python, and how best to code in accordance with those patterns; and only secondarily on the theoretical underpinnings of the endeavor (just enough to provide guidance for making practical choices in other cases not directly covered in the tutorial).</p>\n<p>Design Patterns are shaped, among other things, by the &#8220;forces&#8221; (constraints, desires, opportunities) in play&#8212;and the technologies chosen for implementation (such as, the programming languages to be used) are a strong component of those &#8220;forces&#8221;. Therefore, appropriate choice of patterns, and implementation thereof, in Python, is going to be different from what it would be in other languages (such as C++, or Java).</p>\n<p>The talk covers both &#8220;classical&#8221; patterns from the &#8220;Gang of 4&#8221; book, and Pythonic variations thereof (such as Borg vs Singleton, and Template Method in its many Pythonic incarnations) and other important ones such as Dependency Injection.</p>\n", "title": "Practical Python Patterns", "start_time": "2010-07-20T13:30:00-07:00", "track_id": 5, "user_ids": [76], "room_id": 14, "end_time": "2010-07-20T17:00:00-07:00", "id": 89}