{"description": "\n<p>In recent years, concurrency technology has been getting close attention from performance-sensitive geeks, who are trying to find ways to write parallel code that is comprehensible and usable by mere mortals.</p>\n<p>There are a variety of fundamental techniques that are being explored in approaches to the problem: Functional programming, actors, event-based programming, immutability, transactional memory, tuple spaces, dataflows.  Also of interest are more traditional thread-based approaches like java.util.concurrent and Apple&#8217;s Grand Central Dispatch.</p>\n<p>This talk will try to at least touch on each of these fundamental techniques, and also give a tour of some of the practical tools, both old (Haskell, Erlang) and modern (Clojure, Scala, Node.js) that are available for use today.  It will draw somewhat on my recent <a href=\"http://www.tbray.org/ongoing/When/200x/2009/09/27/Concur-dot-next\">Concur.next</a> and <a href=\"http://www.tbray.org/ongoing/When/200x/2008/05/01/Wide-Finder-2\">Wide Finder 2</a> research projects.</p>\n<p>Attendees should leave with an idea what it is they need to learn to be successful in solving this class of problems.</p>\n", "title": "Practical Concurrency", "start_time": "2010-07-23T10:00:00-07:00", "track_id": 3, "user_ids": [951], "room_id": 14, "end_time": "2010-07-23T10:40:00-07:00", "id": 1863}