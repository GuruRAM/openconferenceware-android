{"description": "\n<p>There comes a time in a project&#8217;s life when you have to make the decision: can this code be saved?  Should we fix it, or declare technical bankruptcy and start again without technical debt?</p>\n<p>Many a project has a raft of legacy code.  We curse it every Monday morning when we sit down to look at it again, and every time we have to bolt new functionality on to old hacks, and every time we uncover a regression in half a million lines of code that didn&#8217;t have a unit test.  The question is, at what point does it become better to spend the time and effort to rewrite all of it?</p>\n\n\nWe&#8217;ll look at:\n\t\n&nbsp;&nbsp;&nbsp;&#8226; How to evaluate your existing code: how hard is it to maintain? to add new features? to test?<br/>\n&nbsp;&nbsp;&nbsp;&#8226; How you can undertake a major refactoring program<br/>\n&nbsp;&nbsp;&nbsp;&#8226; What are your options for replacement?  Can you modify another product or do you need to start from scratch? <br/>\n&nbsp;&nbsp;&nbsp;&#8226; What are your options for a new start?  Are there tools and frameworks that will make it easier and better?<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Will a fresh start increase developer happiness?<br/>\n<br/>\n<p>Attendees should walk away with a plan of attack for fixing their legacy app.</p>\n", "title": "Rewrite or Refactor: When to Declare Technical Bankruptcy", "start_time": "2010-07-22T14:30:00-07:00", "track_id": 10, "user_ids": [1557], "room_id": 20, "end_time": "2010-07-22T15:10:00-07:00", "id": 1539}