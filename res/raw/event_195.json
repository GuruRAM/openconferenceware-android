{"description": "\n<p><strong>Functional Programming in Scala (and Why You Should Care)</strong></p>\n\n&nbsp;&nbsp;&nbsp;&#8226; A brief overview of why functional programming matters (15 mins)\n\t\n&nbsp;&nbsp;&nbsp;&#8226; FP is a more robust approach to concurrency than &#8220;imperative&#8221; approaches. <br/>\n&nbsp;&nbsp;&nbsp;&#8226; FP code tends to be more succinct than procedural code, which improves our productivity in several ways.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Because of its mathematical roots, FP encourages more &#8220;provable-correct&#8221; code.<br/>\n<br/><br/>\n<br/>\n\n&nbsp;&nbsp;&nbsp;&#8226; How Scala supports functional programming (60 mins)\n\t\n&nbsp;&nbsp;&nbsp;&#8226; Scala&#8217;s type system helps us &#8220;bake out&#8221; bugs, which complements our tests. <br/>\n&nbsp;&nbsp;&nbsp;&#8226; Scala supports all the common functional idioms that support the qualities described in the FP overview (we&#8217;ll cover Concurrent later).<br/>\n<br/><br/>\n<br/>\n<p><strong>Better Objects with Traits</strong></p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Traits as a mechanism for component and application composition. (45 mins)\n\t\n&nbsp;&nbsp;&nbsp;&#8226; Scala fixes the the limitations of Java object model, using <em>traits</em>. <br/>\n&nbsp;&nbsp;&nbsp;&#8226; Traits promote abstraction and composition of focused, reusable features.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Traits provide a mechanism for wiring components into applications, similar to <em>dependency injection</em>, but with several advantages.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Despite apparent surface contradictions, Scala integrates functional and object-oriented programming in an elegant way.<br/>\n<br/><br/>\n<br/>\n<p><strong>A Look at Concurrency</strong></p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Scala&#8217;s Actor Library (45 mins)\n\t\n&nbsp;&nbsp;&nbsp;&#8226; Scala&#8217;s standard Actor library implements the <em>Actor</em> model of concurrency, where autonomous agents coordinate their work through message passing.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; A detailed example demonstrates how Actors work and also demonstrates examples of combining object-oriented and functional techniques most effectively in Scala.<br/>\n<br/><br/>\n<br/>\n<p><strong>Q &#38; A (15 mins)</strong></p>\n", "title": "The Seductions of Scala", "start_time": "2010-07-19T13:30:00-07:00", "track_id": 11, "user_ids": [183], "room_id": 11, "end_time": "2010-07-19T17:00:00-07:00", "id": 195}