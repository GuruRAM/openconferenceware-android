{"description": "\n<p>Is it done yet?  An <span class=\"caps\">API</span> call has taken the control flow and gone to do who-knows-what.  Whether you are a component in a distributed system or a human sitting at a <span class=\"caps\">GUI</span> application, you want some indication of progress or even the chance to do other work while you wait.</p>\n<p>In the age of web APIs and cloud computing, latency and blocking operations have become increasingly important.  Both servers and clients need to look for breaks in the control flow and smart ways to defer computation.  Open flows and lazy evaluation make applications more responsive and easier to integrate in complex use-cases.</p>\n<p>Your straight-line, simple procedure might be a network operation or a long-running computation, but translating either into a lazy form is a similarly easy task.  Framing the problem with open and interruptible flows gives you the flexibility to multi-task and distribute work without testing and maintenance complications.</p>\n<p>Whether you are publishing modules on the <span class=\"caps\">CPAN</span> or designing an in-house system, this presentation will show you simple techniques to make your code more reusable and responsive.  Learn how to partition your own algorithms and wrap third-party components to get a handle on the control flow.</p>\n", "title": "I'll Do It Later \u2014 Lazy and Non-Blocking API Design", "start_time": "2010-07-23T10:00:00-07:00", "track_id": 8, "user_ids": [1857], "room_id": 8, "end_time": "2010-07-23T10:40:00-07:00", "id": 1815}