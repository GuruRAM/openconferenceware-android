{"description": "\n<p>The emphasis on modern open source and software development is\nagility, easy to change and &#8220;commit early, commit often&#8221;.  Over the\nlong term, the founders and developers of projects move in and out of\ntheir activity or interest so change can slow.  When a project starts\nto live for years with updates, what are the ways that this can be\nmade a success so that the users can continue to trust and use the\nsoftware?  This presentation will discuss the ways that the project\ncan be organized, bug recording, testing, developer engagement,\ntools, communications and encouraging activity can be used to make a\nsuccessful <span class=\"caps\">OSS</span> project work over the long term.</p>\n<p>Mature means not just that it exists for some time i.e. old, but it\nalso means it&#8217;s a well known thing.  The bugs and quirks are visible\nand probably have workarounds.  Stability can be more important than\nthe latest shiny thing for some applications.  Maturity is thus an\nadvantage in some cases, especially at lower levels of systems.</p>\n<p>Maturing open source software has different challenges from mature\ncommercial closed source software:</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; The developers for <span class=\"caps\">OSS</span> are usually motivated by &#8220;scratching an itch&#8221; rather than getting paid, so it is natural that they move on to other things.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Nobody can see if closed source code is rotting and becoming unmaintainable or out of date, but that&#8217;s easy with <span class=\"caps\">OSS</span>. By sitting  still, <span class=\"caps\">OSS</span> can seem older.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; <span class=\"caps\">OSS</span> does tend to work best in infrastructure such as operating systems and lower levels of systems, so can become quite embedded and older versions live a long time<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Generally you don&#8217;t know who is using <span class=\"caps\">OSS</span>, and relying on it so if updates are needed, there is generally no good way to tell the users.<br/>\n<br/>\n<p>This presentation will discuss how the author dealt with mature <span class=\"caps\">OSS</span>\nprojects such as how to make changes, communicate them and know when\nto stop using lessons learnt on working with\n<a href=\"http://www.libpng.org/pub/png/libpng.html\">libpng</a> (1994-),\n<a href=\"http://cairographics.org/\">cairo</a> (2003-), \n<a href=\"http://librdf.org/\">redland</a> (2000-) and smaller <span class=\"caps\">OSS</span> projects, as well as how\nother large projects have dealt with it.</p>\n<p>The structure will be:</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Introduction to the problem.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Organizing a project for the long term.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Communicating with users and developers.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Developer engagement &#8211; finding and keeping.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Getting help &#8211; using support organisations and sites<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Staying fresh &#8211; releasing often enough.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Staying stable &#8211; testing.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Exit strategies &#8211; know when to stop.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Conclusion<br/>\n<br/>\n", "title": "Mature Open Source - Making Your Software Last a Decade", "start_time": "2010-07-22T13:40:00-07:00", "track_id": 10, "user_ids": [1467], "room_id": 20, "end_time": "2010-07-22T14:20:00-07:00", "id": 1449}