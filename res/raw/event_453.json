{"description": "\n<p>As application infrastructures become increasingly complex, the need for a cohesive, integrated deployment and configuration solution becomes apparent. The era of 6 week server deployments is gone in a world where new computing resources are an <span class=\"caps\">API</span> call away. Modern infrastructures need an <span class=\"caps\">API</span>, so systems can be automated easier.</p>\n<p>Chef is an open source system integration framework, built to bring the benefits of configuration management to an entire infrastructure. Chef provides abstraction and an <span class=\"caps\">API</span> so system administrators write simple code that describes the roles, recipes and resources that should be applied to systems. System administrators love Chef because it gives them flexibility to integrate all aspects of their infrastructure. Software developers love Chef because it helps them take care of the muck so they can focus on writing great applications.</p>\n<p>This tutorial will cover:</p>\n\n&nbsp;&nbsp;&nbsp;&#8226; Configuration management and system integration as an operations discipline.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Chef&#8217;s architecture and design.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Chef concepts, such as Roles, Recipes, Clients, Nodes.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Gory details of Cookbooks.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; How to use existing cookbooks.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Writing a Chef cookbook and overriding an existing cookbook.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Integrating systems with search and libraries.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Anatomy of a Chef run.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Examples of Recipe code and what they do.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Cookbook development workflow, with source version control.<br/>\n&nbsp;&nbsp;&nbsp;&#8226; Interacting with the server <span class=\"caps\">API</span> through the command-line tool, Knife.<br/>\n<br/>\n", "title": "Automated Infrastructure is on the Menu with Chef", "start_time": "2010-07-20T13:30:00-07:00", "track_id": 17, "user_ids": [447, 453], "room_id": 10, "end_time": "2010-07-20T17:00:00-07:00", "id": 453}