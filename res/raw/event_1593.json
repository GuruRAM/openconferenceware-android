{"description": "\n<p>Mainstream programming languages are imperative: the programmer dictates the order of reads and writes to memory. Declarative languages (for example functional and logic languages) remove this major cause of complexity and error. Unfortunately, declarative languages impose severe constraints on the structure and variability of data. These constraints force the rethinking of software designs, or an escape back to imperative programming. I will explain the fundamental reason for these constraints, and present a language design that side-steps the problem by introducing a new object model with a Model-View architecture. It is possible to do declarative programming with objects.</p>\n", "title": "Coherence/Subtext", "start_time": "2010-07-22T14:50:00-07:00", "track_id": 2, "user_ids": [1623], "room_id": 33, "end_time": "2010-07-22T15:10:00-07:00", "id": 1593}