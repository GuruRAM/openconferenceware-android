{"description": "\n<p>The \u201cA\u201d in \u201cAJAX\u201d stands for asynchronous, and indeed modern Web-based and Cloud-based applications are fundamentally asynchronous. However, asynchronous programming is by no means restricted to mobile, Web, and Cloud scenarios, however. Traditional desktop applications also have to maintain responsiveness in the face of long latency IO operations and other expensive background tasks, and server-side endpoints need to handle thousands of asynchronous requests.</p>\n<p>Another common attribute of interactive applications, whether Web/Cloud or client-based, is that they are event-driven. The user interacts with the application via a <span class=\"caps\">GUI</span> that receives event streams asynchronously from the mouse, keyboard, and other inputs.</p>\n<p>Rx is a <span class=\"caps\">LINQ</span>-based library for composing asynchronous and event-based programs that exposes asynchronous and event-based computations as push-based, observable collections via the IObservable&lt;t> and IObserver&lt;t> interfaces that are the mathematical dual of the familiar IEnumerable&lt;t> and IEnumerator&lt;t> interfaces for pull-based, iterable collections.</p>\n<p>In this talk we will unveal Rx for JavaScript, a pure JavaScript version of the original Reactive Extensions for .NET that was shipped last fall.</p>\n", "title": "Reactive Extensions For JavaScript", "start_time": "2010-07-22T13:40:00-07:00", "track_id": 20, "user_ids": [1449], "room_id": 7, "end_time": "2010-07-22T14:20:00-07:00", "id": 1419}