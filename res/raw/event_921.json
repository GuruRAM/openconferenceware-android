{"description": "\n<p>Apache Tomcat is a very popular web server and servlet container, with over 70% penetration in enterprise data centers today.  Tomcat is featureful, agile, and well supported, and thus many webapps are developed for it today.  While Tomcat has a great track record of having secure defaults, and having few security vulnerabilities, your webapp is a different codebase.  How secure is your webapp written to be?  How can the security of your webapp be improved?  And, how secure is the combination of your webapp with your customized configuration Tomcat settings?  This presentation will discuss these issues, and offer solutions that you can use in your own web applications and Tomcat installations.</p>\n<p><span class=\"caps\">HTTP</span> Request Model Vulnerabilities\n- Request Parameters\n  * <span class=\"caps\">XSS</span>\n  * <span class=\"caps\">HTML</span> Injection\n  * <span class=\"caps\">SQL</span> Injection\n- Request Headers\n- Request <span class=\"caps\">URI</span>\n- Container-Level vs. Webapp-Level Filtering\n- How to Write Secure Webapps\nScanning Tools and Remediation\n- Tools\n- Scan, Investigate Reported Vulnerabilities, Remediate, Re-scan\n<span class=\"caps\">HTTP</span> Caching and Security\n- Browser Cache\n- Proxy Cache\n- Tomcat Cache\nUse <span class=\"caps\">HTTPS</span>\n- Disable Insecure Key Lengths\n- Use v6.0.24 and Higher\n- sessionCacheSize and sessionTimeout\n- Configure Your Webapp to Require <span class=\"caps\">HTTPS</span>\nConnector Hardening\n- Max Post Size\n- Max Http Header Size\n- Max Threads\nJava Security Manager\n- History\n- Current state\n- Defaults\n- Recommendation\nWebapp File Permissions\nMonitor for Announced Vulnerabilities and Upgrade\nQ&#38;A</p>\n", "title": "Tomcat Webapp Security", "start_time": "2010-07-21T14:30:00-07:00", "track_id": 11, "user_ids": [915], "room_id": 20, "end_time": "2010-07-21T15:10:00-07:00", "id": 921}