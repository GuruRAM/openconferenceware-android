{"description": "\n<p>You may be the master of software and the kind of open source, hacking web apps by day and device drivers by night, but there&#8217;s <em>still</em> a thrill in a handheld, physical device. It&#8217;s even better when it&#8217;s all open source.</p>\n<p>Enter the Arduino, a micro-controller-based prototyping and <em>physical computing</em> platform. It&#8217;s the brains, but includes loads of analog inputs, and digital inputs and outputs, to read sensors and drive motors and LEDs. The Arduino is both inexpensive and completely open source: from the <span class=\"caps\">PCB</span> board layout to the boot loader, to the standard libraries, to the <span class=\"caps\">IDE</span> and other development tools. Even most of its extensions, or <em>shields</em>, are open source.</p>\n<p>I hadn&#8217;t touched a soldering iron in nearly two decades (after picking one up by the <em>wrong end</em>) but that didn&#8217;t stop me from getting bitten by the hardware bug. You don&#8217;t have to be an electrical engineer to get started with the Arduino, just be able to follow some simple guidelines and be prepared to experiment.</p>\n<p>We&#8217;ll cover the basic electronics you need to know (mostly LEDs and resistors), the programming language (C with a smidgen of C++), and show just how easy it is for software-only nerds to get their feet wet in the world of physical computing.</p>\n", "title": "Arduino: Open Source Hardware Hacking from the Software Nerd Perspective", "start_time": "2010-07-21T10:40:00-07:00", "track_id": 12, "user_ids": [93], "room_id": 9, "end_time": "2010-07-21T11:20:00-07:00", "id": 110}