{"description": "\n<p>The main challenge of the project was bridging the gap between <span class=\"caps\">PHP</span> and C+<ins>. <span class=\"caps\">PHP</span> is a scripting language with dynamic, weak typing. C</ins>+ is a compiled language with static typing. While <span class=\"caps\">PHP</span> allows you to write magical dynamic features, most <span class=\"caps\">PHP</span> is relatively straightforward. It&#8217;s more likely that you see if (...) {...} else {..} than it is to see function foo($x) { include $x; }. This is where we gain in performance. Whenever possible our generated code uses static binding for functions and variables. We also use type inference to pick the most specific type possible for our variables and thus save memory.</p>\n<p>The transformation process includes three main steps:</p>\n<pre><code>1. Static analysis where we collect information on who declares what and dependencies,\n2. Type inference where we choose the most specific type between C++ scalars, String, Array, classes, Object, and Variant, and\n3. Code generation which for the most part is a direct correspondence from PHP statements and expressions to C++ statements and expressions.</code></pre>\n<p>We have also developed HPHPi, which is an experimental interpreter designed for development. When using HPHPi you don&#8217;t need to compile your <span class=\"caps\">PHP</span> source code before running it. It&#8217;s helped us catch bugs in HipHop itself and provides engineers a way to use HipHop without changing how they write <span class=\"caps\">PHP</span>.</p>\n<p>Overall HipHop allows us to keep the best aspects of <span class=\"caps\">PHP</span> while taking advantage of the performance benefits of C++. In total, we have written over 300,000 lines of code and more than 5,000 unit tests.</p>\n", "title": "HipHop for PHP", "start_time": "2010-07-22T10:40:00-07:00", "track_id": 7, "user_ids": [189], "room_id": 5, "end_time": "2010-07-22T11:20:00-07:00", "id": 199}